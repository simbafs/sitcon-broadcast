// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/session"
	"backend/ent/special"
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSession = "Session"
	TypeSpecial = "Special"
)

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op                Op
	typ               string
	id                *string
	title             *string
	room              *string
	broadcastTo       *[]string
	appendbroadcastTo []string
	broadcastFrom     *string
	start             *int64
	addstart          *int64
	end               *int64
	addend            *int64
	speaker           *string
	qa                *string
	slidoID           *string
	slido_admin_link  *string
	co_write          *string
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Session, error)
	predicates        []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id string) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Session entities.
func (m *SessionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *SessionMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SessionMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *SessionMutation) ResetTitle() {
	m.title = nil
}

// SetRoom sets the "room" field.
func (m *SessionMutation) SetRoom(s string) {
	m.room = &s
}

// Room returns the value of the "room" field in the mutation.
func (m *SessionMutation) Room() (r string, exists bool) {
	v := m.room
	if v == nil {
		return
	}
	return *v, true
}

// OldRoom returns the old "room" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldRoom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoom: %w", err)
	}
	return oldValue.Room, nil
}

// ResetRoom resets all changes to the "room" field.
func (m *SessionMutation) ResetRoom() {
	m.room = nil
}

// SetBroadcastTo sets the "broadcastTo" field.
func (m *SessionMutation) SetBroadcastTo(s []string) {
	m.broadcastTo = &s
	m.appendbroadcastTo = nil
}

// BroadcastTo returns the value of the "broadcastTo" field in the mutation.
func (m *SessionMutation) BroadcastTo() (r []string, exists bool) {
	v := m.broadcastTo
	if v == nil {
		return
	}
	return *v, true
}

// OldBroadcastTo returns the old "broadcastTo" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldBroadcastTo(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBroadcastTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBroadcastTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBroadcastTo: %w", err)
	}
	return oldValue.BroadcastTo, nil
}

// AppendBroadcastTo adds s to the "broadcastTo" field.
func (m *SessionMutation) AppendBroadcastTo(s []string) {
	m.appendbroadcastTo = append(m.appendbroadcastTo, s...)
}

// AppendedBroadcastTo returns the list of values that were appended to the "broadcastTo" field in this mutation.
func (m *SessionMutation) AppendedBroadcastTo() ([]string, bool) {
	if len(m.appendbroadcastTo) == 0 {
		return nil, false
	}
	return m.appendbroadcastTo, true
}

// ResetBroadcastTo resets all changes to the "broadcastTo" field.
func (m *SessionMutation) ResetBroadcastTo() {
	m.broadcastTo = nil
	m.appendbroadcastTo = nil
}

// SetBroadcastFrom sets the "broadcastFrom" field.
func (m *SessionMutation) SetBroadcastFrom(s string) {
	m.broadcastFrom = &s
}

// BroadcastFrom returns the value of the "broadcastFrom" field in the mutation.
func (m *SessionMutation) BroadcastFrom() (r string, exists bool) {
	v := m.broadcastFrom
	if v == nil {
		return
	}
	return *v, true
}

// OldBroadcastFrom returns the old "broadcastFrom" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldBroadcastFrom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBroadcastFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBroadcastFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBroadcastFrom: %w", err)
	}
	return oldValue.BroadcastFrom, nil
}

// ResetBroadcastFrom resets all changes to the "broadcastFrom" field.
func (m *SessionMutation) ResetBroadcastFrom() {
	m.broadcastFrom = nil
}

// SetStart sets the "start" field.
func (m *SessionMutation) SetStart(i int64) {
	m.start = &i
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *SessionMutation) Start() (r int64, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldStart(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds i to the "start" field.
func (m *SessionMutation) AddStart(i int64) {
	if m.addstart != nil {
		*m.addstart += i
	} else {
		m.addstart = &i
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *SessionMutation) AddedStart() (r int64, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ResetStart resets all changes to the "start" field.
func (m *SessionMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
}

// SetEnd sets the "end" field.
func (m *SessionMutation) SetEnd(i int64) {
	m.end = &i
	m.addend = nil
}

// End returns the value of the "end" field in the mutation.
func (m *SessionMutation) End() (r int64, exists bool) {
	v := m.end
	if v == nil {
		return
	}
	return *v, true
}

// OldEnd returns the old "end" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldEnd(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnd: %w", err)
	}
	return oldValue.End, nil
}

// AddEnd adds i to the "end" field.
func (m *SessionMutation) AddEnd(i int64) {
	if m.addend != nil {
		*m.addend += i
	} else {
		m.addend = &i
	}
}

// AddedEnd returns the value that was added to the "end" field in this mutation.
func (m *SessionMutation) AddedEnd() (r int64, exists bool) {
	v := m.addend
	if v == nil {
		return
	}
	return *v, true
}

// ResetEnd resets all changes to the "end" field.
func (m *SessionMutation) ResetEnd() {
	m.end = nil
	m.addend = nil
}

// SetSpeaker sets the "speaker" field.
func (m *SessionMutation) SetSpeaker(s string) {
	m.speaker = &s
}

// Speaker returns the value of the "speaker" field in the mutation.
func (m *SessionMutation) Speaker() (r string, exists bool) {
	v := m.speaker
	if v == nil {
		return
	}
	return *v, true
}

// OldSpeaker returns the old "speaker" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSpeaker(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpeaker is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpeaker requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpeaker: %w", err)
	}
	return oldValue.Speaker, nil
}

// ResetSpeaker resets all changes to the "speaker" field.
func (m *SessionMutation) ResetSpeaker() {
	m.speaker = nil
}

// SetQa sets the "qa" field.
func (m *SessionMutation) SetQa(s string) {
	m.qa = &s
}

// Qa returns the value of the "qa" field in the mutation.
func (m *SessionMutation) Qa() (r string, exists bool) {
	v := m.qa
	if v == nil {
		return
	}
	return *v, true
}

// OldQa returns the old "qa" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldQa(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQa is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQa requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQa: %w", err)
	}
	return oldValue.Qa, nil
}

// ResetQa resets all changes to the "qa" field.
func (m *SessionMutation) ResetQa() {
	m.qa = nil
}

// SetSlidoID sets the "slidoID" field.
func (m *SessionMutation) SetSlidoID(s string) {
	m.slidoID = &s
}

// SlidoID returns the value of the "slidoID" field in the mutation.
func (m *SessionMutation) SlidoID() (r string, exists bool) {
	v := m.slidoID
	if v == nil {
		return
	}
	return *v, true
}

// OldSlidoID returns the old "slidoID" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSlidoID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlidoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlidoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlidoID: %w", err)
	}
	return oldValue.SlidoID, nil
}

// ResetSlidoID resets all changes to the "slidoID" field.
func (m *SessionMutation) ResetSlidoID() {
	m.slidoID = nil
}

// SetSlidoAdminLink sets the "slido_admin_link" field.
func (m *SessionMutation) SetSlidoAdminLink(s string) {
	m.slido_admin_link = &s
}

// SlidoAdminLink returns the value of the "slido_admin_link" field in the mutation.
func (m *SessionMutation) SlidoAdminLink() (r string, exists bool) {
	v := m.slido_admin_link
	if v == nil {
		return
	}
	return *v, true
}

// OldSlidoAdminLink returns the old "slido_admin_link" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSlidoAdminLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlidoAdminLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlidoAdminLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlidoAdminLink: %w", err)
	}
	return oldValue.SlidoAdminLink, nil
}

// ResetSlidoAdminLink resets all changes to the "slido_admin_link" field.
func (m *SessionMutation) ResetSlidoAdminLink() {
	m.slido_admin_link = nil
}

// SetCoWrite sets the "co_write" field.
func (m *SessionMutation) SetCoWrite(s string) {
	m.co_write = &s
}

// CoWrite returns the value of the "co_write" field in the mutation.
func (m *SessionMutation) CoWrite() (r string, exists bool) {
	v := m.co_write
	if v == nil {
		return
	}
	return *v, true
}

// OldCoWrite returns the old "co_write" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldCoWrite(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoWrite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoWrite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoWrite: %w", err)
	}
	return oldValue.CoWrite, nil
}

// ResetCoWrite resets all changes to the "co_write" field.
func (m *SessionMutation) ResetCoWrite() {
	m.co_write = nil
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Session, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.title != nil {
		fields = append(fields, session.FieldTitle)
	}
	if m.room != nil {
		fields = append(fields, session.FieldRoom)
	}
	if m.broadcastTo != nil {
		fields = append(fields, session.FieldBroadcastTo)
	}
	if m.broadcastFrom != nil {
		fields = append(fields, session.FieldBroadcastFrom)
	}
	if m.start != nil {
		fields = append(fields, session.FieldStart)
	}
	if m.end != nil {
		fields = append(fields, session.FieldEnd)
	}
	if m.speaker != nil {
		fields = append(fields, session.FieldSpeaker)
	}
	if m.qa != nil {
		fields = append(fields, session.FieldQa)
	}
	if m.slidoID != nil {
		fields = append(fields, session.FieldSlidoID)
	}
	if m.slido_admin_link != nil {
		fields = append(fields, session.FieldSlidoAdminLink)
	}
	if m.co_write != nil {
		fields = append(fields, session.FieldCoWrite)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldTitle:
		return m.Title()
	case session.FieldRoom:
		return m.Room()
	case session.FieldBroadcastTo:
		return m.BroadcastTo()
	case session.FieldBroadcastFrom:
		return m.BroadcastFrom()
	case session.FieldStart:
		return m.Start()
	case session.FieldEnd:
		return m.End()
	case session.FieldSpeaker:
		return m.Speaker()
	case session.FieldQa:
		return m.Qa()
	case session.FieldSlidoID:
		return m.SlidoID()
	case session.FieldSlidoAdminLink:
		return m.SlidoAdminLink()
	case session.FieldCoWrite:
		return m.CoWrite()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldTitle:
		return m.OldTitle(ctx)
	case session.FieldRoom:
		return m.OldRoom(ctx)
	case session.FieldBroadcastTo:
		return m.OldBroadcastTo(ctx)
	case session.FieldBroadcastFrom:
		return m.OldBroadcastFrom(ctx)
	case session.FieldStart:
		return m.OldStart(ctx)
	case session.FieldEnd:
		return m.OldEnd(ctx)
	case session.FieldSpeaker:
		return m.OldSpeaker(ctx)
	case session.FieldQa:
		return m.OldQa(ctx)
	case session.FieldSlidoID:
		return m.OldSlidoID(ctx)
	case session.FieldSlidoAdminLink:
		return m.OldSlidoAdminLink(ctx)
	case session.FieldCoWrite:
		return m.OldCoWrite(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case session.FieldRoom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoom(v)
		return nil
	case session.FieldBroadcastTo:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBroadcastTo(v)
		return nil
	case session.FieldBroadcastFrom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBroadcastFrom(v)
		return nil
	case session.FieldStart:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case session.FieldEnd:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnd(v)
		return nil
	case session.FieldSpeaker:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpeaker(v)
		return nil
	case session.FieldQa:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQa(v)
		return nil
	case session.FieldSlidoID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlidoID(v)
		return nil
	case session.FieldSlidoAdminLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlidoAdminLink(v)
		return nil
	case session.FieldCoWrite:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoWrite(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	var fields []string
	if m.addstart != nil {
		fields = append(fields, session.FieldStart)
	}
	if m.addend != nil {
		fields = append(fields, session.FieldEnd)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case session.FieldStart:
		return m.AddedStart()
	case session.FieldEnd:
		return m.AddedEnd()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case session.FieldStart:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case session.FieldEnd:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEnd(v)
		return nil
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldTitle:
		m.ResetTitle()
		return nil
	case session.FieldRoom:
		m.ResetRoom()
		return nil
	case session.FieldBroadcastTo:
		m.ResetBroadcastTo()
		return nil
	case session.FieldBroadcastFrom:
		m.ResetBroadcastFrom()
		return nil
	case session.FieldStart:
		m.ResetStart()
		return nil
	case session.FieldEnd:
		m.ResetEnd()
		return nil
	case session.FieldSpeaker:
		m.ResetSpeaker()
		return nil
	case session.FieldQa:
		m.ResetQa()
		return nil
	case session.FieldSlidoID:
		m.ResetSlidoID()
		return nil
	case session.FieldSlidoAdminLink:
		m.ResetSlidoAdminLink()
		return nil
	case session.FieldCoWrite:
		m.ResetCoWrite()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Session edge %s", name)
}

// SpecialMutation represents an operation that mutates the Special nodes in the graph.
type SpecialMutation struct {
	config
	op            Op
	typ           string
	id            *string
	data          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Special, error)
	predicates    []predicate.Special
}

var _ ent.Mutation = (*SpecialMutation)(nil)

// specialOption allows management of the mutation configuration using functional options.
type specialOption func(*SpecialMutation)

// newSpecialMutation creates new mutation for the Special entity.
func newSpecialMutation(c config, op Op, opts ...specialOption) *SpecialMutation {
	m := &SpecialMutation{
		config:        c,
		op:            op,
		typ:           TypeSpecial,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSpecialID sets the ID field of the mutation.
func withSpecialID(id string) specialOption {
	return func(m *SpecialMutation) {
		var (
			err   error
			once  sync.Once
			value *Special
		)
		m.oldValue = func(ctx context.Context) (*Special, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Special.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSpecial sets the old Special of the mutation.
func withSpecial(node *Special) specialOption {
	return func(m *SpecialMutation) {
		m.oldValue = func(context.Context) (*Special, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SpecialMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SpecialMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Special entities.
func (m *SpecialMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SpecialMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SpecialMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Special.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetData sets the "data" field.
func (m *SpecialMutation) SetData(s string) {
	m.data = &s
}

// Data returns the value of the "data" field in the mutation.
func (m *SpecialMutation) Data() (r string, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Special entity.
// If the Special object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpecialMutation) OldData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *SpecialMutation) ResetData() {
	m.data = nil
}

// Where appends a list predicates to the SpecialMutation builder.
func (m *SpecialMutation) Where(ps ...predicate.Special) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SpecialMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SpecialMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Special, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SpecialMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SpecialMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Special).
func (m *SpecialMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SpecialMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.data != nil {
		fields = append(fields, special.FieldData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SpecialMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case special.FieldData:
		return m.Data()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SpecialMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case special.FieldData:
		return m.OldData(ctx)
	}
	return nil, fmt.Errorf("unknown Special field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpecialMutation) SetField(name string, value ent.Value) error {
	switch name {
	case special.FieldData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	}
	return fmt.Errorf("unknown Special field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SpecialMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SpecialMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpecialMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Special numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SpecialMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SpecialMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SpecialMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Special nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SpecialMutation) ResetField(name string) error {
	switch name {
	case special.FieldData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown Special field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SpecialMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SpecialMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SpecialMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SpecialMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SpecialMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SpecialMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SpecialMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Special unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SpecialMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Special edge %s", name)
}
