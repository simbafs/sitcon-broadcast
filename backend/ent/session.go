// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/session"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Session is the model entity for the Session schema.
type Session struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Room holds the value of the "room" field.
	Room string `json:"room,omitempty"`
	// BroadcastTo holds the value of the "broadcastTo" field.
	BroadcastTo []string `json:"broadcastTo,omitempty"`
	// BroadcastFrom holds the value of the "broadcastFrom" field.
	BroadcastFrom string `json:"broadcastFrom,omitempty"`
	// Start holds the value of the "start" field.
	Start int64 `json:"start,omitempty"`
	// End holds the value of the "end" field.
	End int64 `json:"end,omitempty"`
	// Speaker holds the value of the "speaker" field.
	Speaker string `json:"speaker,omitempty"`
	// Qa holds the value of the "qa" field.
	Qa string `json:"qa,omitempty"`
	// SlidoID holds the value of the "slidoID" field.
	SlidoID string `json:"slidoID,omitempty"`
	// SlidoAdminLink holds the value of the "slido_admin_link" field.
	SlidoAdminLink string `json:"slido_admin_link,omitempty"`
	// CoWrite holds the value of the "co_write" field.
	CoWrite      string `json:"co_write,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Session) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case session.FieldBroadcastTo:
			values[i] = new([]byte)
		case session.FieldStart, session.FieldEnd:
			values[i] = new(sql.NullInt64)
		case session.FieldID, session.FieldTitle, session.FieldRoom, session.FieldBroadcastFrom, session.FieldSpeaker, session.FieldQa, session.FieldSlidoID, session.FieldSlidoAdminLink, session.FieldCoWrite:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Session fields.
func (s *Session) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case session.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case session.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		case session.FieldRoom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room", values[i])
			} else if value.Valid {
				s.Room = value.String
			}
		case session.FieldBroadcastTo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field broadcastTo", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.BroadcastTo); err != nil {
					return fmt.Errorf("unmarshal field broadcastTo: %w", err)
				}
			}
		case session.FieldBroadcastFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field broadcastFrom", values[i])
			} else if value.Valid {
				s.BroadcastFrom = value.String
			}
		case session.FieldStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				s.Start = value.Int64
			}
		case session.FieldEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				s.End = value.Int64
			}
		case session.FieldSpeaker:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field speaker", values[i])
			} else if value.Valid {
				s.Speaker = value.String
			}
		case session.FieldQa:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qa", values[i])
			} else if value.Valid {
				s.Qa = value.String
			}
		case session.FieldSlidoID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slidoID", values[i])
			} else if value.Valid {
				s.SlidoID = value.String
			}
		case session.FieldSlidoAdminLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slido_admin_link", values[i])
			} else if value.Valid {
				s.SlidoAdminLink = value.String
			}
		case session.FieldCoWrite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field co_write", values[i])
			} else if value.Valid {
				s.CoWrite = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Session.
// This includes values selected through modifiers, order, etc.
func (s *Session) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Session.
// Note that you need to call Session.Unwrap() before calling this method if this Session
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Session) Update() *SessionUpdateOne {
	return NewSessionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Session entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Session) Unwrap() *Session {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Session is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Session) String() string {
	var builder strings.Builder
	builder.WriteString("Session(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("title=")
	builder.WriteString(s.Title)
	builder.WriteString(", ")
	builder.WriteString("room=")
	builder.WriteString(s.Room)
	builder.WriteString(", ")
	builder.WriteString("broadcastTo=")
	builder.WriteString(fmt.Sprintf("%v", s.BroadcastTo))
	builder.WriteString(", ")
	builder.WriteString("broadcastFrom=")
	builder.WriteString(s.BroadcastFrom)
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(fmt.Sprintf("%v", s.Start))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(fmt.Sprintf("%v", s.End))
	builder.WriteString(", ")
	builder.WriteString("speaker=")
	builder.WriteString(s.Speaker)
	builder.WriteString(", ")
	builder.WriteString("qa=")
	builder.WriteString(s.Qa)
	builder.WriteString(", ")
	builder.WriteString("slidoID=")
	builder.WriteString(s.SlidoID)
	builder.WriteString(", ")
	builder.WriteString("slido_admin_link=")
	builder.WriteString(s.SlidoAdminLink)
	builder.WriteString(", ")
	builder.WriteString("co_write=")
	builder.WriteString(s.CoWrite)
	builder.WriteByte(')')
	return builder.String()
}

// Sessions is a parsable slice of Session.
type Sessions []*Session
