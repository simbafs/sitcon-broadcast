// Code generated by ent, DO NOT EDIT.

package session

import (
	"backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldID, id))
}

// Idx applies equality check predicate on the "idx" field. It's identical to IdxEQ.
func Idx(v int8) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldIdx, v))
}

// Finish applies equality check predicate on the "finish" field. It's identical to FinishEQ.
func Finish(v bool) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldFinish, v))
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldStart, v))
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldEnd, v))
}

// Room applies equality check predicate on the "room" field. It's identical to RoomEQ.
func Room(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldRoom, v))
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSessionID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldTitle, v))
}

// IdxEQ applies the EQ predicate on the "idx" field.
func IdxEQ(v int8) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldIdx, v))
}

// IdxNEQ applies the NEQ predicate on the "idx" field.
func IdxNEQ(v int8) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldIdx, v))
}

// IdxIn applies the In predicate on the "idx" field.
func IdxIn(vs ...int8) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldIdx, vs...))
}

// IdxNotIn applies the NotIn predicate on the "idx" field.
func IdxNotIn(vs ...int8) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldIdx, vs...))
}

// IdxGT applies the GT predicate on the "idx" field.
func IdxGT(v int8) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldIdx, v))
}

// IdxGTE applies the GTE predicate on the "idx" field.
func IdxGTE(v int8) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldIdx, v))
}

// IdxLT applies the LT predicate on the "idx" field.
func IdxLT(v int8) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldIdx, v))
}

// IdxLTE applies the LTE predicate on the "idx" field.
func IdxLTE(v int8) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldIdx, v))
}

// FinishEQ applies the EQ predicate on the "finish" field.
func FinishEQ(v bool) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldFinish, v))
}

// FinishNEQ applies the NEQ predicate on the "finish" field.
func FinishNEQ(v bool) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldFinish, v))
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldStart, v))
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldStart, v))
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldStart, vs...))
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldStart, vs...))
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v int64) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldStart, v))
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldStart, v))
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v int64) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldStart, v))
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldStart, v))
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldEnd, v))
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldEnd, v))
}

// EndIn applies the In predicate on the "end" field.
func EndIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldEnd, vs...))
}

// EndNotIn applies the NotIn predicate on the "end" field.
func EndNotIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldEnd, vs...))
}

// EndGT applies the GT predicate on the "end" field.
func EndGT(v int64) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldEnd, v))
}

// EndGTE applies the GTE predicate on the "end" field.
func EndGTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldEnd, v))
}

// EndLT applies the LT predicate on the "end" field.
func EndLT(v int64) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldEnd, v))
}

// EndLTE applies the LTE predicate on the "end" field.
func EndLTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldEnd, v))
}

// RoomEQ applies the EQ predicate on the "room" field.
func RoomEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldRoom, v))
}

// RoomNEQ applies the NEQ predicate on the "room" field.
func RoomNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldRoom, v))
}

// RoomIn applies the In predicate on the "room" field.
func RoomIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldRoom, vs...))
}

// RoomNotIn applies the NotIn predicate on the "room" field.
func RoomNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldRoom, vs...))
}

// RoomGT applies the GT predicate on the "room" field.
func RoomGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldRoom, v))
}

// RoomGTE applies the GTE predicate on the "room" field.
func RoomGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldRoom, v))
}

// RoomLT applies the LT predicate on the "room" field.
func RoomLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldRoom, v))
}

// RoomLTE applies the LTE predicate on the "room" field.
func RoomLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldRoom, v))
}

// RoomContains applies the Contains predicate on the "room" field.
func RoomContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldRoom, v))
}

// RoomHasPrefix applies the HasPrefix predicate on the "room" field.
func RoomHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldRoom, v))
}

// RoomHasSuffix applies the HasSuffix predicate on the "room" field.
func RoomHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldRoom, v))
}

// RoomEqualFold applies the EqualFold predicate on the "room" field.
func RoomEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldRoom, v))
}

// RoomContainsFold applies the ContainsFold predicate on the "room" field.
func RoomContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldRoom, v))
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSessionID, v))
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldSessionID, v))
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldSessionID, vs...))
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldSessionID, vs...))
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldSessionID, v))
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldSessionID, v))
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldSessionID, v))
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldSessionID, v))
}

// SessionIDContains applies the Contains predicate on the "session_id" field.
func SessionIDContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldSessionID, v))
}

// SessionIDHasPrefix applies the HasPrefix predicate on the "session_id" field.
func SessionIDHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldSessionID, v))
}

// SessionIDHasSuffix applies the HasSuffix predicate on the "session_id" field.
func SessionIDHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldSessionID, v))
}

// SessionIDEqualFold applies the EqualFold predicate on the "session_id" field.
func SessionIDEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldSessionID, v))
}

// SessionIDContainsFold applies the ContainsFold predicate on the "session_id" field.
func SessionIDContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldSessionID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldTitle, v))
}

// HasNext applies the HasEdge predicate on the "next" edge.
func HasNext() predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, NextTable, NextPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNextWith applies the HasEdge predicate on the "next" edge with a given conditions (other predicates).
func HasNextWith(preds ...predicate.Session) predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := newNextStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Session) predicate.Session {
	return predicate.Session(sql.NotPredicates(p))
}
