// Code generated by ent, DO NOT EDIT.

package session

import (
	"backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldTitle, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldType, v))
}

// Room applies equality check predicate on the "room" field. It's identical to RoomEQ.
func Room(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldRoom, v))
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldStart, v))
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldEnd, v))
}

// Slido applies equality check predicate on the "slido" field. It's identical to SlidoEQ.
func Slido(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSlido, v))
}

// Slide applies equality check predicate on the "slide" field. It's identical to SlideEQ.
func Slide(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSlide, v))
}

// Hackmd applies equality check predicate on the "hackmd" field. It's identical to HackmdEQ.
func Hackmd(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldHackmd, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldTitle, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldType, v))
}

// RoomEQ applies the EQ predicate on the "room" field.
func RoomEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldRoom, v))
}

// RoomNEQ applies the NEQ predicate on the "room" field.
func RoomNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldRoom, v))
}

// RoomIn applies the In predicate on the "room" field.
func RoomIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldRoom, vs...))
}

// RoomNotIn applies the NotIn predicate on the "room" field.
func RoomNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldRoom, vs...))
}

// RoomGT applies the GT predicate on the "room" field.
func RoomGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldRoom, v))
}

// RoomGTE applies the GTE predicate on the "room" field.
func RoomGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldRoom, v))
}

// RoomLT applies the LT predicate on the "room" field.
func RoomLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldRoom, v))
}

// RoomLTE applies the LTE predicate on the "room" field.
func RoomLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldRoom, v))
}

// RoomContains applies the Contains predicate on the "room" field.
func RoomContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldRoom, v))
}

// RoomHasPrefix applies the HasPrefix predicate on the "room" field.
func RoomHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldRoom, v))
}

// RoomHasSuffix applies the HasSuffix predicate on the "room" field.
func RoomHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldRoom, v))
}

// RoomEqualFold applies the EqualFold predicate on the "room" field.
func RoomEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldRoom, v))
}

// RoomContainsFold applies the ContainsFold predicate on the "room" field.
func RoomContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldRoom, v))
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldStart, v))
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldStart, v))
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldStart, vs...))
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldStart, vs...))
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v int64) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldStart, v))
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldStart, v))
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v int64) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldStart, v))
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldStart, v))
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldEnd, v))
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldEnd, v))
}

// EndIn applies the In predicate on the "end" field.
func EndIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldEnd, vs...))
}

// EndNotIn applies the NotIn predicate on the "end" field.
func EndNotIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldEnd, vs...))
}

// EndGT applies the GT predicate on the "end" field.
func EndGT(v int64) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldEnd, v))
}

// EndGTE applies the GTE predicate on the "end" field.
func EndGTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldEnd, v))
}

// EndLT applies the LT predicate on the "end" field.
func EndLT(v int64) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldEnd, v))
}

// EndLTE applies the LTE predicate on the "end" field.
func EndLTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldEnd, v))
}

// SlidoEQ applies the EQ predicate on the "slido" field.
func SlidoEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSlido, v))
}

// SlidoNEQ applies the NEQ predicate on the "slido" field.
func SlidoNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldSlido, v))
}

// SlidoIn applies the In predicate on the "slido" field.
func SlidoIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldSlido, vs...))
}

// SlidoNotIn applies the NotIn predicate on the "slido" field.
func SlidoNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldSlido, vs...))
}

// SlidoGT applies the GT predicate on the "slido" field.
func SlidoGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldSlido, v))
}

// SlidoGTE applies the GTE predicate on the "slido" field.
func SlidoGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldSlido, v))
}

// SlidoLT applies the LT predicate on the "slido" field.
func SlidoLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldSlido, v))
}

// SlidoLTE applies the LTE predicate on the "slido" field.
func SlidoLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldSlido, v))
}

// SlidoContains applies the Contains predicate on the "slido" field.
func SlidoContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldSlido, v))
}

// SlidoHasPrefix applies the HasPrefix predicate on the "slido" field.
func SlidoHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldSlido, v))
}

// SlidoHasSuffix applies the HasSuffix predicate on the "slido" field.
func SlidoHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldSlido, v))
}

// SlidoEqualFold applies the EqualFold predicate on the "slido" field.
func SlidoEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldSlido, v))
}

// SlidoContainsFold applies the ContainsFold predicate on the "slido" field.
func SlidoContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldSlido, v))
}

// SlideEQ applies the EQ predicate on the "slide" field.
func SlideEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSlide, v))
}

// SlideNEQ applies the NEQ predicate on the "slide" field.
func SlideNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldSlide, v))
}

// SlideIn applies the In predicate on the "slide" field.
func SlideIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldSlide, vs...))
}

// SlideNotIn applies the NotIn predicate on the "slide" field.
func SlideNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldSlide, vs...))
}

// SlideGT applies the GT predicate on the "slide" field.
func SlideGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldSlide, v))
}

// SlideGTE applies the GTE predicate on the "slide" field.
func SlideGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldSlide, v))
}

// SlideLT applies the LT predicate on the "slide" field.
func SlideLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldSlide, v))
}

// SlideLTE applies the LTE predicate on the "slide" field.
func SlideLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldSlide, v))
}

// SlideContains applies the Contains predicate on the "slide" field.
func SlideContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldSlide, v))
}

// SlideHasPrefix applies the HasPrefix predicate on the "slide" field.
func SlideHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldSlide, v))
}

// SlideHasSuffix applies the HasSuffix predicate on the "slide" field.
func SlideHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldSlide, v))
}

// SlideEqualFold applies the EqualFold predicate on the "slide" field.
func SlideEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldSlide, v))
}

// SlideContainsFold applies the ContainsFold predicate on the "slide" field.
func SlideContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldSlide, v))
}

// HackmdEQ applies the EQ predicate on the "hackmd" field.
func HackmdEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldHackmd, v))
}

// HackmdNEQ applies the NEQ predicate on the "hackmd" field.
func HackmdNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldHackmd, v))
}

// HackmdIn applies the In predicate on the "hackmd" field.
func HackmdIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldHackmd, vs...))
}

// HackmdNotIn applies the NotIn predicate on the "hackmd" field.
func HackmdNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldHackmd, vs...))
}

// HackmdGT applies the GT predicate on the "hackmd" field.
func HackmdGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldHackmd, v))
}

// HackmdGTE applies the GTE predicate on the "hackmd" field.
func HackmdGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldHackmd, v))
}

// HackmdLT applies the LT predicate on the "hackmd" field.
func HackmdLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldHackmd, v))
}

// HackmdLTE applies the LTE predicate on the "hackmd" field.
func HackmdLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldHackmd, v))
}

// HackmdContains applies the Contains predicate on the "hackmd" field.
func HackmdContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldHackmd, v))
}

// HackmdHasPrefix applies the HasPrefix predicate on the "hackmd" field.
func HackmdHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldHackmd, v))
}

// HackmdHasSuffix applies the HasSuffix predicate on the "hackmd" field.
func HackmdHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldHackmd, v))
}

// HackmdEqualFold applies the EqualFold predicate on the "hackmd" field.
func HackmdEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldHackmd, v))
}

// HackmdContainsFold applies the ContainsFold predicate on the "hackmd" field.
func HackmdContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldHackmd, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Session) predicate.Session {
	return predicate.Session(sql.NotPredicates(p))
}
