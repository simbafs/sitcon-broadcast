// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/session"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	mutation *SessionMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (sc *SessionCreate) SetTitle(s string) *SessionCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetRoom sets the "room" field.
func (sc *SessionCreate) SetRoom(s string) *SessionCreate {
	sc.mutation.SetRoom(s)
	return sc
}

// SetBroadcastTo sets the "broadcastTo" field.
func (sc *SessionCreate) SetBroadcastTo(s []string) *SessionCreate {
	sc.mutation.SetBroadcastTo(s)
	return sc
}

// SetBroadcastFrom sets the "broadcastFrom" field.
func (sc *SessionCreate) SetBroadcastFrom(s string) *SessionCreate {
	sc.mutation.SetBroadcastFrom(s)
	return sc
}

// SetStart sets the "start" field.
func (sc *SessionCreate) SetStart(i int64) *SessionCreate {
	sc.mutation.SetStart(i)
	return sc
}

// SetEnd sets the "end" field.
func (sc *SessionCreate) SetEnd(i int64) *SessionCreate {
	sc.mutation.SetEnd(i)
	return sc
}

// SetSpeaker sets the "speaker" field.
func (sc *SessionCreate) SetSpeaker(s string) *SessionCreate {
	sc.mutation.SetSpeaker(s)
	return sc
}

// SetQa sets the "qa" field.
func (sc *SessionCreate) SetQa(s string) *SessionCreate {
	sc.mutation.SetQa(s)
	return sc
}

// SetSlidoID sets the "slidoID" field.
func (sc *SessionCreate) SetSlidoID(s string) *SessionCreate {
	sc.mutation.SetSlidoID(s)
	return sc
}

// SetSlidoAdminLink sets the "slido_admin_link" field.
func (sc *SessionCreate) SetSlidoAdminLink(s string) *SessionCreate {
	sc.mutation.SetSlidoAdminLink(s)
	return sc
}

// SetCoWrite sets the "co_write" field.
func (sc *SessionCreate) SetCoWrite(s string) *SessionCreate {
	sc.mutation.SetCoWrite(s)
	return sc
}

// SetID sets the "id" field.
func (sc *SessionCreate) SetID(s string) *SessionCreate {
	sc.mutation.SetID(s)
	return sc
}

// Mutation returns the SessionMutation object of the builder.
func (sc *SessionCreate) Mutation() *SessionMutation {
	return sc.mutation
}

// Save creates the Session in the database.
func (sc *SessionCreate) Save(ctx context.Context) (*Session, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SessionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SessionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SessionCreate) check() error {
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Session.title"`)}
	}
	if _, ok := sc.mutation.Room(); !ok {
		return &ValidationError{Name: "room", err: errors.New(`ent: missing required field "Session.room"`)}
	}
	if _, ok := sc.mutation.BroadcastTo(); !ok {
		return &ValidationError{Name: "broadcastTo", err: errors.New(`ent: missing required field "Session.broadcastTo"`)}
	}
	if _, ok := sc.mutation.BroadcastFrom(); !ok {
		return &ValidationError{Name: "broadcastFrom", err: errors.New(`ent: missing required field "Session.broadcastFrom"`)}
	}
	if _, ok := sc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "Session.start"`)}
	}
	if _, ok := sc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "Session.end"`)}
	}
	if _, ok := sc.mutation.Speaker(); !ok {
		return &ValidationError{Name: "speaker", err: errors.New(`ent: missing required field "Session.speaker"`)}
	}
	if _, ok := sc.mutation.Qa(); !ok {
		return &ValidationError{Name: "qa", err: errors.New(`ent: missing required field "Session.qa"`)}
	}
	if _, ok := sc.mutation.SlidoID(); !ok {
		return &ValidationError{Name: "slidoID", err: errors.New(`ent: missing required field "Session.slidoID"`)}
	}
	if _, ok := sc.mutation.SlidoAdminLink(); !ok {
		return &ValidationError{Name: "slido_admin_link", err: errors.New(`ent: missing required field "Session.slido_admin_link"`)}
	}
	if _, ok := sc.mutation.CoWrite(); !ok {
		return &ValidationError{Name: "co_write", err: errors.New(`ent: missing required field "Session.co_write"`)}
	}
	return nil
}

func (sc *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Session.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SessionCreate) createSpec() (*Session, *sqlgraph.CreateSpec) {
	var (
		_node = &Session{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(session.Table, sqlgraph.NewFieldSpec(session.FieldID, field.TypeString))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(session.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sc.mutation.Room(); ok {
		_spec.SetField(session.FieldRoom, field.TypeString, value)
		_node.Room = value
	}
	if value, ok := sc.mutation.BroadcastTo(); ok {
		_spec.SetField(session.FieldBroadcastTo, field.TypeJSON, value)
		_node.BroadcastTo = value
	}
	if value, ok := sc.mutation.BroadcastFrom(); ok {
		_spec.SetField(session.FieldBroadcastFrom, field.TypeString, value)
		_node.BroadcastFrom = value
	}
	if value, ok := sc.mutation.Start(); ok {
		_spec.SetField(session.FieldStart, field.TypeInt64, value)
		_node.Start = value
	}
	if value, ok := sc.mutation.End(); ok {
		_spec.SetField(session.FieldEnd, field.TypeInt64, value)
		_node.End = value
	}
	if value, ok := sc.mutation.Speaker(); ok {
		_spec.SetField(session.FieldSpeaker, field.TypeString, value)
		_node.Speaker = value
	}
	if value, ok := sc.mutation.Qa(); ok {
		_spec.SetField(session.FieldQa, field.TypeString, value)
		_node.Qa = value
	}
	if value, ok := sc.mutation.SlidoID(); ok {
		_spec.SetField(session.FieldSlidoID, field.TypeString, value)
		_node.SlidoID = value
	}
	if value, ok := sc.mutation.SlidoAdminLink(); ok {
		_spec.SetField(session.FieldSlidoAdminLink, field.TypeString, value)
		_node.SlidoAdminLink = value
	}
	if value, ok := sc.mutation.CoWrite(); ok {
		_spec.SetField(session.FieldCoWrite, field.TypeString, value)
		_node.CoWrite = value
	}
	return _node, _spec
}

// SessionCreateBulk is the builder for creating many Session entities in bulk.
type SessionCreateBulk struct {
	config
	err      error
	builders []*SessionCreate
}

// Save creates the Session entities in the database.
func (scb *SessionCreateBulk) Save(ctx context.Context) ([]*Session, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Session, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SessionCreateBulk) SaveX(ctx context.Context) []*Session {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SessionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SessionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
