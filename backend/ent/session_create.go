// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/session"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	mutation *SessionMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (sc *SessionCreate) SetTitle(s string) *SessionCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (sc *SessionCreate) SetNillableTitle(s *string) *SessionCreate {
	if s != nil {
		sc.SetTitle(*s)
	}
	return sc
}

// SetType sets the "type" field.
func (sc *SessionCreate) SetType(s string) *SessionCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sc *SessionCreate) SetNillableType(s *string) *SessionCreate {
	if s != nil {
		sc.SetType(*s)
	}
	return sc
}

// SetSpeakers sets the "speakers" field.
func (sc *SessionCreate) SetSpeakers(s []string) *SessionCreate {
	sc.mutation.SetSpeakers(s)
	return sc
}

// SetRoom sets the "room" field.
func (sc *SessionCreate) SetRoom(s string) *SessionCreate {
	sc.mutation.SetRoom(s)
	return sc
}

// SetNillableRoom sets the "room" field if the given value is not nil.
func (sc *SessionCreate) SetNillableRoom(s *string) *SessionCreate {
	if s != nil {
		sc.SetRoom(*s)
	}
	return sc
}

// SetBroadcast sets the "broadcast" field.
func (sc *SessionCreate) SetBroadcast(s []string) *SessionCreate {
	sc.mutation.SetBroadcast(s)
	return sc
}

// SetStart sets the "start" field.
func (sc *SessionCreate) SetStart(t time.Time) *SessionCreate {
	sc.mutation.SetStart(t)
	return sc
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (sc *SessionCreate) SetNillableStart(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetStart(*t)
	}
	return sc
}

// SetEnd sets the "end" field.
func (sc *SessionCreate) SetEnd(t time.Time) *SessionCreate {
	sc.mutation.SetEnd(t)
	return sc
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (sc *SessionCreate) SetNillableEnd(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetEnd(*t)
	}
	return sc
}

// SetSlido sets the "slido" field.
func (sc *SessionCreate) SetSlido(s string) *SessionCreate {
	sc.mutation.SetSlido(s)
	return sc
}

// SetNillableSlido sets the "slido" field if the given value is not nil.
func (sc *SessionCreate) SetNillableSlido(s *string) *SessionCreate {
	if s != nil {
		sc.SetSlido(*s)
	}
	return sc
}

// SetSlide sets the "slide" field.
func (sc *SessionCreate) SetSlide(s string) *SessionCreate {
	sc.mutation.SetSlide(s)
	return sc
}

// SetNillableSlide sets the "slide" field if the given value is not nil.
func (sc *SessionCreate) SetNillableSlide(s *string) *SessionCreate {
	if s != nil {
		sc.SetSlide(*s)
	}
	return sc
}

// SetHackmd sets the "hackmd" field.
func (sc *SessionCreate) SetHackmd(s string) *SessionCreate {
	sc.mutation.SetHackmd(s)
	return sc
}

// SetNillableHackmd sets the "hackmd" field if the given value is not nil.
func (sc *SessionCreate) SetNillableHackmd(s *string) *SessionCreate {
	if s != nil {
		sc.SetHackmd(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SessionCreate) SetID(s string) *SessionCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SessionCreate) SetNillableID(s *string) *SessionCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// Mutation returns the SessionMutation object of the builder.
func (sc *SessionCreate) Mutation() *SessionMutation {
	return sc.mutation
}

// Save creates the Session in the database.
func (sc *SessionCreate) Save(ctx context.Context) (*Session, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SessionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SessionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SessionCreate) defaults() {
	if _, ok := sc.mutation.Title(); !ok {
		v := session.DefaultTitle
		sc.mutation.SetTitle(v)
	}
	if _, ok := sc.mutation.GetType(); !ok {
		v := session.DefaultType
		sc.mutation.SetType(v)
	}
	if _, ok := sc.mutation.Speakers(); !ok {
		v := session.DefaultSpeakers
		sc.mutation.SetSpeakers(v)
	}
	if _, ok := sc.mutation.Room(); !ok {
		v := session.DefaultRoom
		sc.mutation.SetRoom(v)
	}
	if _, ok := sc.mutation.Broadcast(); !ok {
		v := session.DefaultBroadcast
		sc.mutation.SetBroadcast(v)
	}
	if _, ok := sc.mutation.Start(); !ok {
		v := session.DefaultStart
		sc.mutation.SetStart(v)
	}
	if _, ok := sc.mutation.End(); !ok {
		v := session.DefaultEnd
		sc.mutation.SetEnd(v)
	}
	if _, ok := sc.mutation.Slido(); !ok {
		v := session.DefaultSlido
		sc.mutation.SetSlido(v)
	}
	if _, ok := sc.mutation.Slide(); !ok {
		v := session.DefaultSlide
		sc.mutation.SetSlide(v)
	}
	if _, ok := sc.mutation.Hackmd(); !ok {
		v := session.DefaultHackmd
		sc.mutation.SetHackmd(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := session.DefaultID
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SessionCreate) check() error {
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Session.title"`)}
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Session.type"`)}
	}
	if _, ok := sc.mutation.Speakers(); !ok {
		return &ValidationError{Name: "speakers", err: errors.New(`ent: missing required field "Session.speakers"`)}
	}
	if _, ok := sc.mutation.Room(); !ok {
		return &ValidationError{Name: "room", err: errors.New(`ent: missing required field "Session.room"`)}
	}
	if _, ok := sc.mutation.Broadcast(); !ok {
		return &ValidationError{Name: "broadcast", err: errors.New(`ent: missing required field "Session.broadcast"`)}
	}
	if _, ok := sc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "Session.start"`)}
	}
	if _, ok := sc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "Session.end"`)}
	}
	if _, ok := sc.mutation.Slido(); !ok {
		return &ValidationError{Name: "slido", err: errors.New(`ent: missing required field "Session.slido"`)}
	}
	if _, ok := sc.mutation.Slide(); !ok {
		return &ValidationError{Name: "slide", err: errors.New(`ent: missing required field "Session.slide"`)}
	}
	if _, ok := sc.mutation.Hackmd(); !ok {
		return &ValidationError{Name: "hackmd", err: errors.New(`ent: missing required field "Session.hackmd"`)}
	}
	return nil
}

func (sc *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Session.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SessionCreate) createSpec() (*Session, *sqlgraph.CreateSpec) {
	var (
		_node = &Session{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(session.Table, sqlgraph.NewFieldSpec(session.FieldID, field.TypeString))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(session.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(session.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := sc.mutation.Speakers(); ok {
		_spec.SetField(session.FieldSpeakers, field.TypeJSON, value)
		_node.Speakers = value
	}
	if value, ok := sc.mutation.Room(); ok {
		_spec.SetField(session.FieldRoom, field.TypeString, value)
		_node.Room = value
	}
	if value, ok := sc.mutation.Broadcast(); ok {
		_spec.SetField(session.FieldBroadcast, field.TypeJSON, value)
		_node.Broadcast = value
	}
	if value, ok := sc.mutation.Start(); ok {
		_spec.SetField(session.FieldStart, field.TypeTime, value)
		_node.Start = value
	}
	if value, ok := sc.mutation.End(); ok {
		_spec.SetField(session.FieldEnd, field.TypeTime, value)
		_node.End = value
	}
	if value, ok := sc.mutation.Slido(); ok {
		_spec.SetField(session.FieldSlido, field.TypeString, value)
		_node.Slido = value
	}
	if value, ok := sc.mutation.Slide(); ok {
		_spec.SetField(session.FieldSlide, field.TypeString, value)
		_node.Slide = value
	}
	if value, ok := sc.mutation.Hackmd(); ok {
		_spec.SetField(session.FieldHackmd, field.TypeString, value)
		_node.Hackmd = value
	}
	return _node, _spec
}

// SessionCreateBulk is the builder for creating many Session entities in bulk.
type SessionCreateBulk struct {
	config
	err      error
	builders []*SessionCreate
}

// Save creates the Session entities in the database.
func (scb *SessionCreateBulk) Save(ctx context.Context) ([]*Session, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Session, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SessionCreateBulk) SaveX(ctx context.Context) []*Session {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SessionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SessionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
