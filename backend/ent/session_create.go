// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/session"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	mutation *SessionMutation
	hooks    []Hook
}

// SetIdx sets the "idx" field.
func (sc *SessionCreate) SetIdx(i int8) *SessionCreate {
	sc.mutation.SetIdx(i)
	return sc
}

// SetFinish sets the "finish" field.
func (sc *SessionCreate) SetFinish(b bool) *SessionCreate {
	sc.mutation.SetFinish(b)
	return sc
}

// SetNillableFinish sets the "finish" field if the given value is not nil.
func (sc *SessionCreate) SetNillableFinish(b *bool) *SessionCreate {
	if b != nil {
		sc.SetFinish(*b)
	}
	return sc
}

// SetStart sets the "start" field.
func (sc *SessionCreate) SetStart(i int64) *SessionCreate {
	sc.mutation.SetStart(i)
	return sc
}

// SetEnd sets the "end" field.
func (sc *SessionCreate) SetEnd(i int64) *SessionCreate {
	sc.mutation.SetEnd(i)
	return sc
}

// SetRoom sets the "room" field.
func (sc *SessionCreate) SetRoom(s string) *SessionCreate {
	sc.mutation.SetRoom(s)
	return sc
}

// SetSessionID sets the "session_id" field.
func (sc *SessionCreate) SetSessionID(s string) *SessionCreate {
	sc.mutation.SetSessionID(s)
	return sc
}

// SetNext sets the "next" field.
func (sc *SessionCreate) SetNext(s string) *SessionCreate {
	sc.mutation.SetNext(s)
	return sc
}

// SetTitle sets the "title" field.
func (sc *SessionCreate) SetTitle(s string) *SessionCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetData sets the "data" field.
func (sc *SessionCreate) SetData(m map[string]interface{}) *SessionCreate {
	sc.mutation.SetData(m)
	return sc
}

// Mutation returns the SessionMutation object of the builder.
func (sc *SessionCreate) Mutation() *SessionMutation {
	return sc.mutation
}

// Save creates the Session in the database.
func (sc *SessionCreate) Save(ctx context.Context) (*Session, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SessionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SessionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SessionCreate) defaults() {
	if _, ok := sc.mutation.Finish(); !ok {
		v := session.DefaultFinish
		sc.mutation.SetFinish(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SessionCreate) check() error {
	if _, ok := sc.mutation.Idx(); !ok {
		return &ValidationError{Name: "idx", err: errors.New(`ent: missing required field "Session.idx"`)}
	}
	if _, ok := sc.mutation.Finish(); !ok {
		return &ValidationError{Name: "finish", err: errors.New(`ent: missing required field "Session.finish"`)}
	}
	if _, ok := sc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "Session.start"`)}
	}
	if _, ok := sc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "Session.end"`)}
	}
	if _, ok := sc.mutation.Room(); !ok {
		return &ValidationError{Name: "room", err: errors.New(`ent: missing required field "Session.room"`)}
	}
	if _, ok := sc.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session_id", err: errors.New(`ent: missing required field "Session.session_id"`)}
	}
	if _, ok := sc.mutation.Next(); !ok {
		return &ValidationError{Name: "next", err: errors.New(`ent: missing required field "Session.next"`)}
	}
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Session.title"`)}
	}
	if _, ok := sc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "Session.data"`)}
	}
	return nil
}

func (sc *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SessionCreate) createSpec() (*Session, *sqlgraph.CreateSpec) {
	var (
		_node = &Session{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(session.Table, sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Idx(); ok {
		_spec.SetField(session.FieldIdx, field.TypeInt8, value)
		_node.Idx = value
	}
	if value, ok := sc.mutation.Finish(); ok {
		_spec.SetField(session.FieldFinish, field.TypeBool, value)
		_node.Finish = value
	}
	if value, ok := sc.mutation.Start(); ok {
		_spec.SetField(session.FieldStart, field.TypeInt64, value)
		_node.Start = value
	}
	if value, ok := sc.mutation.End(); ok {
		_spec.SetField(session.FieldEnd, field.TypeInt64, value)
		_node.End = value
	}
	if value, ok := sc.mutation.Room(); ok {
		_spec.SetField(session.FieldRoom, field.TypeString, value)
		_node.Room = value
	}
	if value, ok := sc.mutation.SessionID(); ok {
		_spec.SetField(session.FieldSessionID, field.TypeString, value)
		_node.SessionID = value
	}
	if value, ok := sc.mutation.Next(); ok {
		_spec.SetField(session.FieldNext, field.TypeString, value)
		_node.Next = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(session.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sc.mutation.Data(); ok {
		_spec.SetField(session.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	return _node, _spec
}

// SessionCreateBulk is the builder for creating many Session entities in bulk.
type SessionCreateBulk struct {
	config
	err      error
	builders []*SessionCreate
}

// Save creates the Session entities in the database.
func (scb *SessionCreateBulk) Save(ctx context.Context) ([]*Session, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Session, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SessionCreateBulk) SaveX(ctx context.Context) []*Session {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SessionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SessionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
