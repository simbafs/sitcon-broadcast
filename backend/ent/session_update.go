// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/session"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SessionUpdate is the builder for updating Session entities.
type SessionUpdate struct {
	config
	hooks    []Hook
	mutation *SessionMutation
}

// Where appends a list predicates to the SessionUpdate builder.
func (su *SessionUpdate) Where(ps ...predicate.Session) *SessionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetTitle sets the "title" field.
func (su *SessionUpdate) SetTitle(s string) *SessionUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *SessionUpdate) SetNillableTitle(s *string) *SessionUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// SetStart sets the "start" field.
func (su *SessionUpdate) SetStart(i int64) *SessionUpdate {
	su.mutation.ResetStart()
	su.mutation.SetStart(i)
	return su
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (su *SessionUpdate) SetNillableStart(i *int64) *SessionUpdate {
	if i != nil {
		su.SetStart(*i)
	}
	return su
}

// AddStart adds i to the "start" field.
func (su *SessionUpdate) AddStart(i int64) *SessionUpdate {
	su.mutation.AddStart(i)
	return su
}

// SetEnd sets the "end" field.
func (su *SessionUpdate) SetEnd(i int64) *SessionUpdate {
	su.mutation.ResetEnd()
	su.mutation.SetEnd(i)
	return su
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (su *SessionUpdate) SetNillableEnd(i *int64) *SessionUpdate {
	if i != nil {
		su.SetEnd(*i)
	}
	return su
}

// AddEnd adds i to the "end" field.
func (su *SessionUpdate) AddEnd(i int64) *SessionUpdate {
	su.mutation.AddEnd(i)
	return su
}

// SetSpeaker sets the "speaker" field.
func (su *SessionUpdate) SetSpeaker(s string) *SessionUpdate {
	su.mutation.SetSpeaker(s)
	return su
}

// SetNillableSpeaker sets the "speaker" field if the given value is not nil.
func (su *SessionUpdate) SetNillableSpeaker(s *string) *SessionUpdate {
	if s != nil {
		su.SetSpeaker(*s)
	}
	return su
}

// SetQa sets the "qa" field.
func (su *SessionUpdate) SetQa(s string) *SessionUpdate {
	su.mutation.SetQa(s)
	return su
}

// SetNillableQa sets the "qa" field if the given value is not nil.
func (su *SessionUpdate) SetNillableQa(s *string) *SessionUpdate {
	if s != nil {
		su.SetQa(*s)
	}
	return su
}

// SetSlidoID sets the "slidoID" field.
func (su *SessionUpdate) SetSlidoID(s string) *SessionUpdate {
	su.mutation.SetSlidoID(s)
	return su
}

// SetNillableSlidoID sets the "slidoID" field if the given value is not nil.
func (su *SessionUpdate) SetNillableSlidoID(s *string) *SessionUpdate {
	if s != nil {
		su.SetSlidoID(*s)
	}
	return su
}

// SetSlidoAdminLink sets the "slido_admin_link" field.
func (su *SessionUpdate) SetSlidoAdminLink(s string) *SessionUpdate {
	su.mutation.SetSlidoAdminLink(s)
	return su
}

// SetNillableSlidoAdminLink sets the "slido_admin_link" field if the given value is not nil.
func (su *SessionUpdate) SetNillableSlidoAdminLink(s *string) *SessionUpdate {
	if s != nil {
		su.SetSlidoAdminLink(*s)
	}
	return su
}

// SetCoWrite sets the "co_write" field.
func (su *SessionUpdate) SetCoWrite(s string) *SessionUpdate {
	su.mutation.SetCoWrite(s)
	return su
}

// SetNillableCoWrite sets the "co_write" field if the given value is not nil.
func (su *SessionUpdate) SetNillableCoWrite(s *string) *SessionUpdate {
	if s != nil {
		su.SetCoWrite(*s)
	}
	return su
}

// Mutation returns the SessionMutation object of the builder.
func (su *SessionUpdate) Mutation() *SessionMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SessionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SessionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SessionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SessionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(session.Table, session.Columns, sqlgraph.NewFieldSpec(session.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(session.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.Start(); ok {
		_spec.SetField(session.FieldStart, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedStart(); ok {
		_spec.AddField(session.FieldStart, field.TypeInt64, value)
	}
	if value, ok := su.mutation.End(); ok {
		_spec.SetField(session.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedEnd(); ok {
		_spec.AddField(session.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := su.mutation.Speaker(); ok {
		_spec.SetField(session.FieldSpeaker, field.TypeString, value)
	}
	if value, ok := su.mutation.Qa(); ok {
		_spec.SetField(session.FieldQa, field.TypeString, value)
	}
	if value, ok := su.mutation.SlidoID(); ok {
		_spec.SetField(session.FieldSlidoID, field.TypeString, value)
	}
	if value, ok := su.mutation.SlidoAdminLink(); ok {
		_spec.SetField(session.FieldSlidoAdminLink, field.TypeString, value)
	}
	if value, ok := su.mutation.CoWrite(); ok {
		_spec.SetField(session.FieldCoWrite, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SessionUpdateOne is the builder for updating a single Session entity.
type SessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SessionMutation
}

// SetTitle sets the "title" field.
func (suo *SessionUpdateOne) SetTitle(s string) *SessionUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableTitle(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// SetStart sets the "start" field.
func (suo *SessionUpdateOne) SetStart(i int64) *SessionUpdateOne {
	suo.mutation.ResetStart()
	suo.mutation.SetStart(i)
	return suo
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableStart(i *int64) *SessionUpdateOne {
	if i != nil {
		suo.SetStart(*i)
	}
	return suo
}

// AddStart adds i to the "start" field.
func (suo *SessionUpdateOne) AddStart(i int64) *SessionUpdateOne {
	suo.mutation.AddStart(i)
	return suo
}

// SetEnd sets the "end" field.
func (suo *SessionUpdateOne) SetEnd(i int64) *SessionUpdateOne {
	suo.mutation.ResetEnd()
	suo.mutation.SetEnd(i)
	return suo
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableEnd(i *int64) *SessionUpdateOne {
	if i != nil {
		suo.SetEnd(*i)
	}
	return suo
}

// AddEnd adds i to the "end" field.
func (suo *SessionUpdateOne) AddEnd(i int64) *SessionUpdateOne {
	suo.mutation.AddEnd(i)
	return suo
}

// SetSpeaker sets the "speaker" field.
func (suo *SessionUpdateOne) SetSpeaker(s string) *SessionUpdateOne {
	suo.mutation.SetSpeaker(s)
	return suo
}

// SetNillableSpeaker sets the "speaker" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableSpeaker(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetSpeaker(*s)
	}
	return suo
}

// SetQa sets the "qa" field.
func (suo *SessionUpdateOne) SetQa(s string) *SessionUpdateOne {
	suo.mutation.SetQa(s)
	return suo
}

// SetNillableQa sets the "qa" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableQa(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetQa(*s)
	}
	return suo
}

// SetSlidoID sets the "slidoID" field.
func (suo *SessionUpdateOne) SetSlidoID(s string) *SessionUpdateOne {
	suo.mutation.SetSlidoID(s)
	return suo
}

// SetNillableSlidoID sets the "slidoID" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableSlidoID(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetSlidoID(*s)
	}
	return suo
}

// SetSlidoAdminLink sets the "slido_admin_link" field.
func (suo *SessionUpdateOne) SetSlidoAdminLink(s string) *SessionUpdateOne {
	suo.mutation.SetSlidoAdminLink(s)
	return suo
}

// SetNillableSlidoAdminLink sets the "slido_admin_link" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableSlidoAdminLink(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetSlidoAdminLink(*s)
	}
	return suo
}

// SetCoWrite sets the "co_write" field.
func (suo *SessionUpdateOne) SetCoWrite(s string) *SessionUpdateOne {
	suo.mutation.SetCoWrite(s)
	return suo
}

// SetNillableCoWrite sets the "co_write" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableCoWrite(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetCoWrite(*s)
	}
	return suo
}

// Mutation returns the SessionMutation object of the builder.
func (suo *SessionUpdateOne) Mutation() *SessionMutation {
	return suo.mutation
}

// Where appends a list predicates to the SessionUpdate builder.
func (suo *SessionUpdateOne) Where(ps ...predicate.Session) *SessionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SessionUpdateOne) Select(field string, fields ...string) *SessionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Session entity.
func (suo *SessionUpdateOne) Save(ctx context.Context) (*Session, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SessionUpdateOne) SaveX(ctx context.Context) *Session {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SessionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SessionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SessionUpdateOne) sqlSave(ctx context.Context) (_node *Session, err error) {
	_spec := sqlgraph.NewUpdateSpec(session.Table, session.Columns, sqlgraph.NewFieldSpec(session.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Session.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, session.FieldID)
		for _, f := range fields {
			if !session.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != session.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(session.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.Start(); ok {
		_spec.SetField(session.FieldStart, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedStart(); ok {
		_spec.AddField(session.FieldStart, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.End(); ok {
		_spec.SetField(session.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedEnd(); ok {
		_spec.AddField(session.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.Speaker(); ok {
		_spec.SetField(session.FieldSpeaker, field.TypeString, value)
	}
	if value, ok := suo.mutation.Qa(); ok {
		_spec.SetField(session.FieldQa, field.TypeString, value)
	}
	if value, ok := suo.mutation.SlidoID(); ok {
		_spec.SetField(session.FieldSlidoID, field.TypeString, value)
	}
	if value, ok := suo.mutation.SlidoAdminLink(); ok {
		_spec.SetField(session.FieldSlidoAdminLink, field.TypeString, value)
	}
	if value, ok := suo.mutation.CoWrite(); ok {
		_spec.SetField(session.FieldCoWrite, field.TypeString, value)
	}
	_node = &Session{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
